using System.Collections.Immutable;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Text;
using ViewBindings.SourceGenerator.Attributes;
using Xunit;
using VerifyCS = ViewBindings.SourceGenerator.Tests.CSharpSourceGeneratorVerifier<ViewBindings.SourceGenerator.ViewBindingsSourceGenerator>;

namespace ViewBindings.SourceGenerator.Tests;

public class ViewBindingsSourceGeneratorTests
{
    const string Header = """
        // <auto-generated/>
        #pragma warning disable
        #nullable enable
        using System;
        using System.Windows;
        
        namespace ViewBindings.SourceGenerator.Demo.Resources;
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        """;

    static Compilation CreateCompilation(string source)
            => CSharpCompilation.Create("ViewBindings.SourceGenerator.Demo",
                new[] { CSharpSyntaxTree.ParseText(source) },
                new[] { MetadataReference.CreateFromFile(typeof(ViewBindingsSourceGeneratorTests).GetTypeInfo().Assembly.Location) },
                new CSharpCompilationOptions(OutputKind.ConsoleApplication));

    readonly ImmutableArray<string> _references = AppDomain.CurrentDomain
    .GetAssemblies()
    .Where(assembly => !assembly.IsDynamic)
    .Select(assembly => assembly.Location)
    .ToImmutableArray();

    private async Task RunTestAsync(string code, string expectedResult)
    {
        var tester = new VerifyCS.Test
        {
            TestState =
                {
                    Sources = { code },
                    GeneratedSources =
                    {
                        (typeof(ViewBindingsSourceGenerator), "GeneratedViewBindings.g.cs",
                            SourceText.From(expectedResult, Encoding.UTF8))
                    }
                },
            ReferenceAssemblies = ReferenceAssemblies.Net.Net60
        };

        tester.ReferenceAssemblies.AddAssemblies(_references);
        tester.TestState.AdditionalReferences.Add(typeof(ViewBindingAttribute).Assembly);
        tester.TestState.AdditionalReferences.Add(typeof(Contracts.Attributes.ViewBindingAttribute).Assembly);

        await tester.RunAsync();
    }

    [Fact]
    public async Task CreateCompositionRoot_RegisterService_NoExistingCompositionRoot()
    {
        var code = """
using ViewBindings.SourceGenerator.Contracts.Attributes;

namespace ViewBindings.SourceGenerator.Demo.ViewModels;

[ViewBinding]
public class SecondViewModel
{

}
""";

        var expected = Header + """
public class GeneratedViewBindings : ResourceDictionary
{
    public GeneratedViewBindings()
    {
        AddDataTemplate(typeof(ViewBindings.SourceGenerator.Demo.ViewModels.SecondViewModel), typeof(ViewBindings.SourceGenerator.Demo.Views.SecondView));
    }

    void AddDataTemplate(Type viewModel, Type view)
    {
        var dataTemplate = new DataTemplate(viewModel)
        {VisualTree = new FrameworkElementFactory(view)};
        Add(new DataTemplateKey(viewModel), dataTemplate);
    }
}
""";

        await RunTestAsync(code, expected);
        Assert.True(true); // silence warnings, real test happens in the RunAsync() method
    }

    [Fact]
    public async Task CreateCompositionRoot_RegisterService_ExistingCompositionRoot()
    {
        var code = """
using ViewBindings.SourceGenerator.Contracts.Attributes;
using LightInject;

namespace ViewBindings.SourceGenerator.Demo;

[Register]
public class Service : IService {}
public interface IService {}

public partial class CompositionRoot : ICompositionRoot
{
    public static void RegisterServices(IServiceRegistry serviceRegistry)
    {
        
    } 
}

""";

        var expected = Header + """
public partial class CompositionRoot : ICompositionRoot
{
    public void Compose(IServiceRegistry serviceRegistry)
    {
        RegisterServices(serviceRegistry);
        serviceRegistry.Register<ViewBindings.SourceGenerator.Demo.IService, ViewBindings.SourceGenerator.Demo.Service>(new PerRequestLifeTime());
    }
}
""";

        await RunTestAsync(code, expected);
        Assert.True(true); // silence warnings, real test happens in the RunAsync() method
    }

    [Fact]
    public async Task Register_SpecifiedLifetime_And_ServiceName()
    {
        var code = """
using ViewBindings.SourceGenerator.Contracts.Attributes;
using ViewBindings.SourceGenerator.Contracts.Enums;

namespace ViewBindings.SourceGenerator.Demo;

[Register(Lifetime = Lifetime.Scoped, ServiceName = "Test")]
public class Service : IService {}
public interface IService {}

""";

        var expected = Header + """
public class CompositionRoot : ICompositionRoot
{
    public void Compose(IServiceRegistry serviceRegistry)
    {
        serviceRegistry.Register<ViewBindings.SourceGenerator.Demo.IService, ViewBindings.SourceGenerator.Demo.Service>("Test", new PerScopeLifetime());
    }
}
""";

        await RunTestAsync(code, expected);
        Assert.True(true); // silence warnings, real test happens in the RunAsync() method
    }

    [Fact]
    public async Task CreateCompositionRoot_RegisterService_AutomaticlyGeneratedInterface()
    {
        var code = """
using ViewBindings.SourceGenerator.Contracts.Attributes;

namespace ViewBindings.SourceGenerator.Tests;
[GenerateAutomaticInterface]
[Register]
public class AutomaticlyGeneratedService : IAutomaticlyGeneratedService
{
    public void DoSomething()
    {
    }
}
""";

        var expected = Header.Replace("Demo", "Tests") + """
public class CompositionRoot : ICompositionRoot
{
    public void Compose(IServiceRegistry serviceRegistry)
    {
        serviceRegistry.Register<ViewBindings.SourceGenerator.Tests.IAutomaticlyGeneratedService, ViewBindings.SourceGenerator.Tests.AutomaticlyGeneratedService>(new PerRequestLifeTime());
    }
}
""";

        await RunTestAsync(code, expected);
        Assert.True(true); // silence warnings, real test happens in the RunAsync() method
    }
}